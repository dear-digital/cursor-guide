# Component Development Guide

## Overview
This guide outlines the complete process of adding a new component to the system, from Sanity schema creation to frontend implementation.

## Step 1: Create Sanity Schema
1. Create a new schema file in the appropriate directory:
   - For content blocks: `studio/schemas/objects/content-blocks/`
   - For hero blocks: `studio/schemas/objects/hero-blocks/`
   - For other components: `studio/schemas/objects/`

2. Follow the schema structure:
```typescript
import {defineField, defineType} from 'sanity';
import {IconName} from 'lucide-react'; // or use Sanity icons

export default defineType({
  name: 'componentName',
  title: 'Component Title',
  type: 'object',
  icon: IconName, // Use appropriate icon
  fields: [
    defineField({
      name: 'title',
      title: 'Title',
      description: 'The main title of the component',
      type: 'string',
    }),
    // Add other fields as needed
  ],
  preview: {
    select: {
      title: 'title',
    },
    prepare({title}) {
      return {
        title: title || 'No title',
      };
    },
  },
});
```

## Step 2: Add to Lists/Arrays
1. Add the component to the appropriate list file:
   - For content blocks: `studio/schemas/objects/content-blocks/contentBlockList.ts`
   - For hero blocks: `studio/schemas/objects/hero-blocks/heroBlocksList.ts`

```typescript
import {componentName} from './componentName';

export const contentBlockSections = () => ({
  name: 'contentBlocks',
  title: 'Content Blocks',
  type: 'array',
  of: [
    // ... existing components
    componentName,
  ],
});
```

## Step 3: Create GROQ Fragment
1. Create a new fragment file in `app/qroq/content-blocks/` or `app/qroq/hero-blocks/`
2. Define the fragment following the pattern:

```typescript
import {q} from 'groqd';

export const COMPONENT_NAME_FRAGMENT = q('componentName').grab({
  _type: q.literal('componentName'),
  _key: q.string(),
  // Add all fields from the schema
  title: q.string(),
  // ... other fields
});
```

3. Add the fragment to the main fragments file:
```typescript
import {COMPONENT_NAME_FRAGMENT} from './content-blocks/componentName';

export const CONTENT_BLOCKS_FRAGMENT = q('contentBlocks[]', {isArray: true}).grab({
  _type: q.string(),
  _key: q.string(),
  // ... other fragments
  ...COMPONENT_NAME_FRAGMENT,
});
```

## Step 4: Create Frontend Component
1. Create a new component file in the appropriate directory:
   - For content blocks: `app/components/content-blocks/`
   - For hero blocks: `app/components/hero-blocks/`

2. Follow the component structure:
```typescript
import type {ComponentNameProps} from '~/types';

export function ComponentName({data}: ComponentNameProps) {
  return (
    <section className="...">
      {/* Component implementation */}
    </section>
  );
}
```

3. Add the component to the appropriate renderer:
```typescript
import {ComponentName} from './content-blocks/ComponentName';

export function ContentBlockRenderer({data}: ContentBlockRendererProps) {
  switch (data._type) {
    // ... other cases
    case 'componentName':
      return <ComponentName data={data} />;
    default:
      return null;
  }
}
```

## Step 5: Type Generation
1. After adding the schema, run:
```bash
sanity schema extract && sanity typegen generate --enforce-required-fields
```

## Best Practices
1. Always include proper TypeScript types
2. Follow the established naming conventions
3. Include proper documentation
4. Add appropriate icons
5. Implement proper preview in Sanity
6. Follow accessibility guidelines
7. Use Tailwind for styling
8. Include proper error handling
9. Add proper SEO considerations
10. Test the component in both Sanity and the frontend

## Example Component Structure
```
studio/
├── schemas/
│   └── objects/
│       └── content-blocks/
│           ├── componentName.ts
│           └── contentBlockList.ts
app/
├── components/
│   └── content-blocks/
│       └── ComponentName.tsx
├── qroq/
│   └── content-blocks/
│       └── componentName.ts
└── types/
    └── content-blocks.ts
``` 
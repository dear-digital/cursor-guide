---
description: 
globs: 
alwaysApply: true
---
# Component Development Guide

## Overview
This guide outlines the complete process of adding a new component to the system, from Sanity schema creation to frontend implementation. **All Sanity component schemas must end in `Section`**, e.g. `heroBannerSection`, `testimonialSection`.

---

## Step 1: Create Sanity Schema

1. Create a new schema file in the appropriate directory:
   - For content blocks: `studio/schemas/objects/content-blocks/`
   - For hero blocks: `studio/schemas/objects/hero-blocks/`
   - For other components: `studio/schemas/objects/`
   - Sometimes blocks can be re-used. For example if I need a Headline, you can re-use the headlineBlock() and this also has some queries already. Always look if there is a block that can be re-used.

2. Follow the schema structure:

```ts
import {defineField, defineType} from 'sanity';
import {IconName} from 'lucide-react'; // or use Sanity icons

export default defineType({
  name: 'exampleSection',
  title: 'Example Section',
  type: 'object',
  icon: IconName, // Use appropriate icon
  fields: [
    defineField({
      name: 'title',
      title: 'Title',
      description: 'The main title of the section',
      type: 'string',
    }),
    // Add other fields as needed
  ],
  preview: {
    select: {
      title: 'title',
    },
    prepare({title}) {
      return {
        title: title || 'No title',
      };
    },
  },
});
```

> ðŸ”’ **Important**: All schema names **must end in `Section`** (e.g. `faqSection`, `imageGallerySection`).

---

## Step 2: Add to Lists/Arrays

1. Add the new schema to the appropriate list file:
   - For content blocks: `studio/schemas/objects/content-blocks/contentBlockList.ts`
   - For hero blocks: `studio/schemas/objects/hero-blocks/heroBlocksList.ts`

```ts
import {exampleSection} from './exampleSection';

export const contentBlockSections = () => ({
  name: 'contentBlocks',
  title: 'Content Blocks',
  type: 'array',
  of: [
    // ... existing components
    exampleSection,
  ],
});
```

---

## Re-use blocks

1. If a block can be re-used, add the block to the schema:
    - Blocks are located at studio/schemas/objects/blocks

```ts
import headlineBlock from '../blocks/headlineBLock';

export default defineType({
  name: 'exampleSection',
  title: 'Example Section',
  type: 'object',
  icon: IconName, // Use appropriate icon
  fields: [
    headlineBlock(),
    defineField({
      name: 'title',
      title: 'Title',
      description: 'The main title of the section',
      type: 'string',
    }),
    // Add other fields as needed
  ],
  preview: {
    select: {
      title: 'title',
    },
    prepare({title}) {
      return {
        title: title || 'No title',
      };
    },
  },
});
```

## Step 3: Create GROQ Fragment

1. Create a new fragment file in `app/qroq/content-blocks/` or `app/qroq/hero-blocks/`
2. Define the fragment:

```ts
import {q} from 'groqd';

export const EXAMPLE_SECTION_FRAGMENT = q('exampleSection').grab({
  _type: q.literal('exampleSection'),
  _key: q.string(),
  title: q.string(),
  // ... other fields
});
```

3. Add it to the main fragment export:

```ts
import {EXAMPLE_SECTION_FRAGMENT} from './content-blocks/exampleSection';

export const CONTENT_BLOCKS_FRAGMENT = q('contentBlocks[]', {isArray: true}).grab({
  _type: q.string(),
  _key: q.string(),
  // ... other fragments
  ...EXAMPLE_SECTION_FRAGMENT,
});
```

---

## Step 4: Create Frontend Component

1. Create a new React component in the appropriate directory:
   - For content blocks: `app/components/content-blocks/`
   - For hero blocks: `app/components/hero-blocks/`

```tsx
import type {ExampleSectionProps} from '~/types';

export function ExampleSection({data}: ExampleSectionProps) {
  return (
    <section className="...">
      {/* Component content */}
    </section>
  );
}
```

2. Add to the renderer:

```tsx
import {ExampleSection} from './content-blocks/ExampleSection';

export function ContentBlockRenderer({data}: ContentBlockRendererProps) {
  switch (data._type) {
    case 'exampleSection':
      return <ExampleSection data={data} />;
    default:
      return null;
  }
}
```

---

## Step 5: Type Generation

After saving the schema, run:

```bash
sanity schema extract && sanity typegen generate --enforce-required-fields
```

---

## Best Practices

1. All component schemas **must end in `Section`**
2. Always include proper TypeScript types
3. Follow naming conventions (PascalCase for components, camelCase for schema `name`)
4. Include clear documentation and descriptions
5. Add a relevant icon for better Sanity UI
6. Implement a clear preview in Sanity
7. Use Tailwind CSS for styling
8. Follow accessibility (a11y) standards
9. Handle all errors and fallback gracefully
10. Optimize for SEO where relevant
11. Test both in the Sanity Studio and the frontend

---

## Example Component Structure

```
studio/
â”œâ”€â”€ schemas/
â”‚   â””â”€â”€ objects/
â”‚       â””â”€â”€ content-blocks/
â”‚           â”œâ”€â”€ exampleSection.ts
â”‚           â””â”€â”€ contentBlockList.ts
app/
â”œâ”€â”€ components/
â”‚   â””â”€â”€ content-blocks/
â”‚       â””â”€â”€ ExampleSection.tsx
â”œâ”€â”€ qroq/
â”‚   â””â”€â”€ content-blocks/
â”‚       â””â”€â”€ exampleSection.ts
â””â”€â”€ types/
    â””â”€â”€ content-blocks.ts
```

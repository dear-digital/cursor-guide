---
description: 
globs: 
alwaysApply: true
---
description: Comprehensive best practices for Remix and TypeScript development. This rule file covers code organization, component architecture, performance, security, testing, and more. It is designed to help the development team remain unified in their use of tools and methodologies.
globs: **/*.{js,jsx,ts,tsx}
⸻

Comprehensive Remix & TypeScript Best Practices and Coding Standards

This document consolidates the essential guidelines for building maintainable, scalable, and secure applications using Remix and TypeScript. Whether you’re creating React components, developing server-side logic, or writing Node scripts, these rules ensure a unified approach across your projects.

⸻

1. Code Organization and Structure

1.1 Directory Structure

Remix-Specific Structure:

A well-organized directory is key for maintainability. Consider the following recommended structure:

my-remix-app/
├── app/
│   ├── components/       # Reusable UI components (PascalCase filenames)
│   │   ├── Button.tsx
│   │   └── Card.tsx
│   ├── utils/            # Utility functions (camelCase filenames)
│   │   ├── date-utils.ts
│   │   └── api.ts
│   ├── services/         # Business logic and server-only utilities (e.g. auth.server.ts)
│   │   ├── auth.server.ts
│   │   └── user.server.ts
│   ├── routes/           # Remix route modules (kebab-case, use $param for dynamics)
│   │   ├── _index.tsx
│   │   ├── about.tsx
│   │   └── blog/
│   │       ├── $slug.tsx
│   │       └── index.tsx
│   ├── styles/           # Global stylesheets (kebab-case)
│   │   └── global.css
│   ├── entry.client.tsx  # Client-side entry point
│   ├── entry.server.tsx  # Server-side entry point
│   └── root.tsx          # Root component (HTML structure)
├── public/               # Static assets (images, fonts, etc.)
├── package.json
└── tsconfig.json

TypeScript/Feature-Based Structure:

For projects with heavy TypeScript usage, consider a feature-based or type-based organization:

src/
├── feature1/
│   ├── components/
│   │   ├── ComponentA.tsx
│   │   └── ComponentB.tsx
│   ├── services/
│   │   └── feature1.service.ts
│   ├── types.ts
│   └── feature1.module.ts
├── feature2/
│   └── ...
└── shared/
    ├── components/
    ├── services/
    └── types/
        └── global.d.ts

Key File Naming Conventions:
	•	Components: Use PascalCase (e.g., Button.tsx).
	•	Services: Use descriptive names with a .service.ts suffix.
	•	Types: Use typeName.types.ts or group them in a types.ts file.
	•	Routes: Use kebab-case for route modules and $param for dynamic segments.

1.2 Module and Component Organization
	•	Modules: Group related functionality (components, utilities, services) into a single module. Use index files (index.ts or index.tsx) to re-export members.
	•	Component Architecture:
	•	Presentational vs. Container Components: Separate UI-only components from those handling data fetching or state.
	•	Composition Over Inheritance: Use React’s children prop or render props to promote flexibility.
	•	Controlled vs. Uncontrolled Components: Know when to use each to manage component state effectively.

⸻

2. Common Patterns and Anti-patterns

2.1 Design Patterns
	•	Compound Components: Utilize React Context to share state and logic implicitly between parent and child components.
	•	Render Props & Function as Child: Offers flexible rendering options.
	•	Custom Hooks: Extract and reuse stateful logic.
	•	Provider Pattern: Manage global state with context providers.
	•	Guard Clauses Pattern: Simplify function logic by returning early when specific conditions are not met. This improves readability by reducing nested conditionals and making the “happy path” more obvious.

2.2 Data Handling with Remix
	•	Loaders: Use for server-side data fetching, ensuring data is ready before rendering.
	•	Actions: Handle form submissions and data mutations.
	•	Error Boundaries: Define at the route level to gracefully handle errors.

2.3 TypeScript-Specific Considerations
	•	Type Safety: Avoid overusing any. Use generics and specific types to leverage TypeScript’s benefits.
	•	Design Patterns: Apply patterns like Factory, Singleton, Observer, or Strategy when appropriate.
	•	Immutability: Practice immutable state updates, particularly when using state management libraries.

2.4 Anti-patterns to Avoid
	•	Direct DOM Manipulation: Rely on React’s state and props.
	•	Deeply Nested JSX: Extract complex conditional logic into helper functions or subcomponents.
	•	Over-reliance on Client-Side State: Leverage Remix’s server-side capabilities for data fetching and mutations.

⸻

3. Performance Considerations

3.1 Optimization Techniques
	•	Bundle Size Reduction:
	•	Remove unused code and dependencies.
	•	Use code splitting and dynamic imports (e.g., React.lazy) for non-critical components.
	•	Leverage Remix’s built-in route-based code splitting.
	•	Memoization:
	•	Use React.memo, useMemo, and useCallback to prevent unnecessary re-renders.
	•	Lazy Loading:
	•	Implement lazy loading for components and assets to improve initial load times.

3.2 Memory and Rendering Optimization
	•	Memory Management:
	•	Clean up event listeners and subscriptions in useEffect cleanup functions.
	•	Prevent memory leaks by unsubscribing when components unmount.
	•	Rendering Efficiency:
	•	Use virtualized lists or tables for rendering large datasets.
	•	Profile and optimize re-renders using React Profiler.

⸻

4. Security Best Practices

4.1 Protecting Against Vulnerabilities
	•	XSS & CSRF:
	•	Sanitize user input and escape outputs.
	•	Use anti-CSRF tokens for form submissions and API requests.
	•	SQL Injection:
	•	Use parameterized queries or ORMs in server-side code.
	•	API Security:
	•	Ensure HTTPS is used for all communication.
	•	Validate all API requests and responses.

4.2 Input Validation and Data Protection
	•	Validation:
	•	Validate and sanitize inputs on both client and server using libraries like Zod or Yup.
	•	Authentication & Authorization:
	•	Use secure authentication methods (OAuth, JWT, server-side sessions).
	•	Implement role-based access control (RBAC) to restrict resource access.
	•	Data Encryption:
	•	Encrypt sensitive data both at rest and in transit.

⸻

5. Testing Approaches

5.1 Unit and Integration Testing
	•	Unit Testing:
	•	Use frameworks like Jest or Mocha to test individual components, functions, and services.
	•	Isolate units with mocks and stubs.
	•	Integration Testing:
	•	Validate the interaction between modules and data flow between components.
	•	Use React Testing Library for component interaction tests.

5.2 End-to-End Testing
	•	E2E Testing:
	•	Use tools like Cypress or Playwright to simulate complete user journeys.
	•	Incorporate E2E tests into your CI/CD pipeline for consistent quality assurance.

⸻

6. Common Pitfalls and Debugging Strategies

6.1 Frequent Mistakes
	•	Loader/Action Misuse:
	•	Understand Remix’s lifecycle for data fetching and mutations.
	•	Complex State Management:
	•	Avoid unnecessary complexity; keep state logic simple.
	•	Insufficient Error Handling:
	•	Use error boundaries and proper logging instead of empty try-catch blocks.

6.2 Debugging Techniques
	•	Developer Tools:
	•	Utilize browser developer tools and React DevTools for debugging.
	•	Logging and Profiling:
	•	Implement server-side logging and use source maps for debugging transpiled code.
	•	TypeScript Diagnostics:
	•	Rely on TypeScript’s compiler to catch type errors early.

⸻

7. Tooling, Environment, and CI/CD

7.1 Recommended Tools and Extensions
	•	IDE: Cursor (with extensions for TypeScript, React, and Remix).
	•	Browser: Chrome or Firefox with developer tools.
	•	Package Manager: npm.
	•	Testing Tools: Jest, React Testing Library, Cypress, or Playwright.
	•	Linting & Formatting: ESLint and Prettier for code consistency.

7.2 Build Configuration and Deployment
	•	Build Tools:
	•	Use Remix’s built-in build configuration along with bundlers like Webpack if needed.
	•	Leverage environment variables for configuration across environments.
	•	Deployment:
	•	Deploy on serverless platforms (e.g., Vercel) or via containerization (Docker).
	•	Optimize static asset delivery using a CDN.

7.3 CI/CD Integration
	•	Automation:
	•	Integrate linting, formatting, tests, and deployments into your CI/CD pipeline.
	•	Use platforms like GitHub Actions to streamline the build–test–deploy cycle.